generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String         @id @default(cuid())
  name              String?
  email             String?        @unique
  emailVerified     DateTime?
  username          String?        @unique
  image             String?
  bio               String?
  birthday          String?
  link              String?
  displayName       String?
  profileTheme      String?
  createdCommmunity Community[]    @relation("CreatedBy")
  accounts          Account[]
  sessions          Session[]
  Post              Post[]
  Comment           Comment[]
  CommentVote       CommentVote[]
  Vote              Vote[]
  Subscription      Subscription[]
  Notification      Notification[]
  Message           Message[]      @relation("author")
  receivedMessage   Message[]      @relation("recipient")
}

model Community {
  id          String         @id @default(cuid())
  name        String         @unique
  createdAt   DateTime
  updatedAt   DateTime
  creatorId   String?
  description String?
  image       String?
  posts       Post[]
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  userId       String
  communityId  String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  community    Community      @relation(fields: [communityId], references: [id], onDelete: Cascade)
  Notification Notification[]

  @@id([userId, communityId])
}

model Post {
  id           String         @id @default(cuid())
  title        String
  content      Json?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  communityId  String
  authorId     String
  community    Community      @relation(fields: [communityId], references: [id], onDelete: Cascade)
  author       User           @relation(fields: [authorId], references: [id])
  comments     Comment[]
  votes        Vote[]
  Notification Notification[]
}

model Comment {
  id           String         @id @default(cuid())
  text         String
  createdAt    DateTime       @default(now())
  authorId     String
  postId       String
  userId       String
  commentId    String?
  replyToId    String?
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post         Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  replyTo      Comment?       @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies      Comment[]      @relation("ReplyTo")
  votes        CommentVote[]
  Notification Notification[]
}

model Vote {
  userId String
  postId String
  type   VoteType
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post     @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model CommentVote {
  userId    String
  commentId String
  type      VoteType
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@id([userId, commentId])
}

model Notification {
  id                      String        @id @default(cuid())
  type                    String
  postId                  String?
  commentId               String?
  read                    Boolean
  createdAt               DateTime      @default(now())
  subscriptionUserId      String?
  subscriptionCommunityId String?
  commentText             String?
  voteType                VoteType?
  recipientId             String?
  senderId                String?
  sender                  User?         @relation(fields: [senderId], references: [id])
  post                    Post?         @relation(fields: [postId], references: [id])
  comment                 Comment?      @relation(fields: [commentId], references: [id])
  subscribe               Subscription? @relation(fields: [subscriptionUserId, subscriptionCommunityId], references: [userId, communityId])
}

model Message {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  read      Boolean

  text  String?
  image String?

  authorId String?
  author   User?   @relation("author", fields: [authorId], references: [id])

  recipientId String?
  recipient   User?   @relation("recipient", fields: [recipientId], references: [id])

  conversationId String?
  Conversation   Conversation? @relation("messages", fields: [conversationId], references: [id], onDelete: Restrict, onUpdate: Restrict)

  message Conversation[] @relation("lastMessages")
}

model Conversation {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  participantIds String   @unique

  messages Message[] @relation("messages")

  lastMessageId String?
  lastMessage   Message? @relation("lastMessages", fields: [lastMessageId], references: [id], onDelete: SetNull, onUpdate: Restrict)
}

enum VoteType {
  UP
  DOWN
}
